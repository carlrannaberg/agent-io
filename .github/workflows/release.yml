name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Prevent concurrent releases
concurrency:
  group: release
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write
  id-token: write

jobs:
  # Create or update release PR
  release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm run release
          version: npm run version
          commit: "chore: release packages"
          title: "chore: release packages"
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Publish packages when release PR is merged
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: release-pr
    if: needs.release-pr.outputs.published == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build:all

      - name: Validate packages before publish
        run: |
          # Check that all packages build successfully
          npm run validate

          # Verify package contents
          for pkg in packages/*/; do
            if [ -f "$pkg/package.json" ]; then
              echo "Checking $pkg"
              cd "$pkg"
              npm pack --dry-run
              cd -
            fi
          done

      - name: Create GitHub Release
        if: needs.release-pr.outputs.publishedPackages != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Parse published packages
          PACKAGES='${{ needs.release-pr.outputs.publishedPackages }}'
          echo "Published packages: $PACKAGES"

          # Create release notes
          RELEASE_NOTES="## Published Packages\n\n"
          echo "$PACKAGES" | jq -r '.[] | "- \(.name)@\(.version)"' | while read line; do
            RELEASE_NOTES="${RELEASE_NOTES}${line}\n"
          done

          echo -e "$RELEASE_NOTES"

  # Post-release tasks
  post-release:
    name: Post Release Tasks
    runs-on: ubuntu-latest
    needs: [release-pr, publish]
    if: needs.release-pr.outputs.published == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update documentation
        run: |
          echo "Release completed successfully!"
          echo "Published packages: ${{ needs.release-pr.outputs.publishedPackages }}"

      - name: Notify release completed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Could add Slack/Discord notifications here
          echo "Release notification would be sent here"
